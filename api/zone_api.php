<?php
header("Content-Type: application/json");
include_once __DIR__ . '/../db_config.php';
include 'log_api.php';

// Function to send JSON response
function sendResponse($status, $message, $data = null, $httpCode = 200) {
    $response = ["status" => $status, "message" => $message];
    if ($data !== null) {
        $response["data"] = $data;
    }
    
    http_response_code($httpCode);
    echo json_encode($response);
    exit;
}

// Get HTTP method
$method = $_SERVER['REQUEST_METHOD'];

switch ($method) {
    case 'POST': // Create Zone
        $data = json_decode(file_get_contents("php://input"), true);
        
        // Validate required fields
        if (empty($data['zone_name']) || empty($data['zone_location']) || empty($data['zone_pincode'])) {
            sendResponse("error", "All fields (zone_name, zone_location, zone_pincode) are required", null, 400);
        }

        $zone_name = $data['zone_name'];
        $zone_location = $data['zone_location'];
        $zone_pincode = $data['zone_pincode'];

        // Insert new zone (zone_id auto-generated by trigger)
        $sql = "INSERT INTO zone (zone_name, zone_location, zone_pincode) VALUES (?, ?, ?)";
        $stmt = $conn->prepare($sql);
        
        if (!$stmt) {
            sendResponse("error", "Database error: " . $conn->error, null, 500);
        }
        
        $stmt->bind_param("sss", $zone_name, $zone_location, $zone_pincode);
        
        if ($stmt->execute()) {
            // Get the auto-generated zone_id
            $result = $conn->query("SELECT zone_id FROM zone WHERE zone_name = '" . 
                                 $conn->real_escape_string($zone_name) . 
                                 "' ORDER BY zone_id DESC LIMIT 1");
            $row = $result->fetch_assoc();
            
            sendResponse("success", "Zone created successfully", ["zone_id" => $row['zone_id']], 201);
        } else {
            sendResponse("error", "Error creating zone: " . $stmt->error, null, 500);
        }
        $stmt->close();
        break;

    case 'GET': // Retrieve Zones (All or Specific)
        if (isset($_GET['zone_id'])) {
            // Get single zone
            $zone_id = $conn->real_escape_string($_GET['zone_id']);
            $sql = "SELECT * FROM zone WHERE zone_id = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("s", $zone_id);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows > 0) {
                sendResponse("success", "Zone found", $result->fetch_assoc());
            } else {
                sendResponse("error", "Zone not found", null, 404);
            }
            $stmt->close();
        } else {
            // Get all zones
            $sql = "SELECT * FROM zone";
            $result = $conn->query($sql);
            
            if (!$result) {
                sendResponse("error", "Database error: " . $conn->error, null, 500);
            }
            
            $zones = [];
            while ($row = $result->fetch_assoc()) {
                $zones[] = $row;
            }
            sendResponse("success", "Zones retrieved", $zones);
        }
        break;

    case 'PUT': // Update Zone (Partial updates supported)
        $data = json_decode(file_get_contents("php://input"), true);
        
        if (empty($data['zone_id'])) {
            sendResponse("error", "Zone ID is required", null, 400);
        }

        $zone_id = $data['zone_id'];
        $updates = [];
        $params = [];
        $types = "";

        // Build dynamic update query
        if (isset($data['zone_name'])) {
            $updates[] = "zone_name = ?";
            $params[] = $data['zone_name'];
            $types .= "s";
        }
        if (isset($data['zone_location'])) {
            $updates[] = "zone_location = ?";
            $params[] = $data['zone_location'];
            $types .= "s";
        }
        if (isset($data['zone_pincode'])) {
            $updates[] = "zone_pincode = ?";
            $params[] = $data['zone_pincode'];
            $types .= "s";
        }

        if (empty($updates)) {
            sendResponse("error", "No fields to update", null, 400);
        }

        // Add zone_id to params
        $params[] = $zone_id;
        $types .= "s";

        $sql = "UPDATE zone SET " . implode(", ", $updates) . " WHERE zone_id = ?";
        $stmt = $conn->prepare($sql);
        
        if (!$stmt) {
            sendResponse("error", "Database error: " . $conn->error, null, 500);
        }
        
        $stmt->bind_param($types, ...$params);

        if ($stmt->execute()) {
            if ($stmt->affected_rows > 0) {
                sendResponse("success", "Zone updated successfully", ["zone_id" => $zone_id]);
            } else {
                sendResponse("error", "No changes made or zone not found", null, 404);
            }
        } else {
            sendResponse("error", "Error updating zone: " . $stmt->error, null, 500);
        }
        $stmt->close();
        break;

    case 'DELETE': // Delete Zone
        $data = json_decode(file_get_contents("php://input"), true);
        
        if (empty($data['zone_id'])) {
            sendResponse("error", "Zone ID is required", null, 400);
        }

        $zone_id = $data['zone_id'];

        // Check if zone exists
        $check_sql = "SELECT zone_id FROM zone WHERE zone_id = ?";
        $check_stmt = $conn->prepare($check_sql);
        $check_stmt->bind_param("s", $zone_id);
        $check_stmt->execute();
        $check_result = $check_stmt->get_result();
        
        if ($check_result->num_rows === 0) {
            sendResponse("error", "Zone not found", null, 404);
        }

        // Delete the zone
        $delete_sql = "DELETE FROM zone WHERE zone_id = ?";
        $delete_stmt = $conn->prepare($delete_sql);
        $delete_stmt->bind_param("s", $zone_id);
        
        if ($delete_stmt->execute()) {
            sendResponse("success", "Zone deleted successfully");
        } else {
            sendResponse("error", "Error deleting zone: " . $delete_stmt->error, null, 500);
        }
        
        $check_stmt->close();
        $delete_stmt->close();
        break;

    default:
        sendResponse("error", "Invalid request method", null, 405);
}

$conn->close();
?>