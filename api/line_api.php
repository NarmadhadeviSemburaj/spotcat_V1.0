<?php
header("Content-Type: application/json");
include_once __DIR__ . '/../db_config.php';
include_once __DIR__ . '/log_api.php';

// Request handling
$method = $_SERVER['REQUEST_METHOD'];
$ip_address = $_SERVER['REMOTE_ADDR'] ?? null;
$user_agent = $_SERVER['HTTP_USER_AGENT'] ?? null;

switch ($method) {
    case 'POST': createLine($conn, $ip_address, $user_agent); break;
    case 'GET': 
        isset($_GET['line_id']) ? getLine($conn, $ip_address, $user_agent) : 
        listLines($conn, $ip_address, $user_agent);
        break;
    case 'PUT': updateLine($conn, $ip_address, $user_agent); break;
    case 'DELETE': deleteLine($conn, $ip_address, $user_agent); break;
    default:
        sendResponse('error', 'Invalid request method', null, 405);
        logAction('Invalid method', 'error', $ip_address, $user_agent);
        break;
}

// Helper Functions
function sendResponse($status, $message, $data, $httpCode = 200) {
    http_response_code($httpCode);
    echo json_encode(['status' => $status, 'message' => $message, 'data' => $data]);
}

function logAction($action, $type, $ip, $agent, $details = []) {
    logUserAction(null, 'system', $type, $action, $_SERVER['REQUEST_URI'], $_SERVER['REQUEST_METHOD'], $details, $type, $details, $ip, $agent);
}

// --- CRUD Operations ---
// 1. Create Line (using database trigger for line_id)
function createLine($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    if (empty($input['line_name']) || empty($input['cluster_id'])) {
        sendResponse('error', 'line_name and cluster_id are required', null, 400);
        logAction('Create failed: Missing fields', 'error', $ip_address, $user_agent, $input);
        return;
    }

    // Insert into database (line_id will be auto-generated by trigger)
    $sql = "INSERT INTO line (line_name, line_location, line_pincode, cluster_id) VALUES (?, ?, ?, ?)";
    $stmt = $conn->prepare($sql);
    $stmt->bind_param("ssss", $input['line_name'], $input['line_location'], $input['line_pincode'], $input['cluster_id']);

    if ($stmt->execute()) {
        // Get the auto-generated line_id
        $line_id = $stmt->insert_id;
        // If your line_id is a string (like LID_XXXXXX), you might need to fetch it separately
        // This depends on how your trigger is implemented
        $line_id = $conn->query("SELECT line_id FROM line WHERE line_id = " . $stmt->insert_id)->fetch_assoc()['line_id'];
        
        sendResponse('success', 'Line created', ['line_id' => $line_id], 201);
        logAction('Line created', 'create', $ip_address, $user_agent, ['line_id' => $line_id]);
    } else {
        sendResponse('error', 'Failed to create line: ' . $stmt->error, null, 500);
        logAction('Create failed', 'error', $ip_address, $user_agent, ['error' => $stmt->error]);
    }
}

// 2. List All Lines
function listLines($conn, $ip_address, $user_agent) {
    $sql = "SELECT line_id, line_name, line_location, line_pincode, cluster_id FROM line";
    $result = $conn->query($sql);
    
    $lines = [];
    while ($row = $result->fetch_assoc()) {
        $lines[] = $row;
    }

    sendResponse('success', 'Lines retrieved', $lines);
    logAction('Listed lines', 'read', $ip_address, $user_agent, ['count' => count($lines)]);
}

// 3. Get Single Line
function getLine($conn, $ip_address, $user_agent) {
    $line_id = $conn->real_escape_string($_GET['line_id']);
    $stmt = $conn->prepare("SELECT * FROM line WHERE line_id = ?");
    $stmt->bind_param("s", $line_id);
    $stmt->execute();
    $result = $stmt->get_result();

    if ($result->num_rows > 0) {
        sendResponse('success', 'Line retrieved', $result->fetch_assoc());
        logAction('Viewed line', 'read', $ip_address, $user_agent, ['line_id' => $line_id]);
    } else {
        sendResponse('error', 'Line not found', null, 404);
        logAction('Line not found', 'error', $ip_address, $user_agent, ['line_id' => $line_id]);
    }
}

// 4. Update Line
function updateLine($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    if (empty($input['line_id'])) {
        sendResponse('error', 'line_id is required', null, 400);
        logAction('Update failed: Missing ID', 'error', $ip_address, $user_agent, $input);
        return;
    }

    $line_id = $input['line_id'];
    $fields = [];
    $values = [];

    if (isset($input['line_name'])) {
        $fields[] = "line_name = ?";
        $values[] = $input['line_name'];
    }
    if (isset($input['line_location'])) {
        $fields[] = "line_location = ?";
        $values[] = $input['line_location'];
    }
    if (isset($input['line_pincode'])) {
        $fields[] = "line_pincode = ?";
        $values[] = $input['line_pincode'];
    }

    if (empty($fields)) {
        sendResponse('error', 'No fields to update', null, 400);
        logAction('Update failed: No fields', 'error', $ip_address, $user_agent, $input);
        return;
    }

    $sql = "UPDATE line SET " . implode(", ", $fields) . " WHERE line_id = ?";
    $values[] = $line_id;

    $stmt = $conn->prepare($sql);
    $stmt->bind_param(str_repeat("s", count($values)), ...$values);

    if ($stmt->execute()) {
        sendResponse('success', 'Line updated', ['line_id' => $line_id]);
        logAction('Line updated', 'update', $ip_address, $user_agent, $input);
    } else {
        sendResponse('error', 'Update failed: ' . $stmt->error, null, 500);
        logAction('Update failed', 'error', $ip_address, $user_agent, ['error' => $stmt->error]);
    }
}

// 5. Delete Line
function deleteLine($conn, $ip_address, $user_agent) {
    $input = json_decode(file_get_contents("php://input"), true);

    if (empty($input['line_id'])) {
        sendResponse('error', 'line_id is required', null, 400);
        logAction('Delete failed: Missing ID', 'error', $ip_address, $user_agent, $input);
        return;
    }

    $stmt = $conn->prepare("DELETE FROM line WHERE line_id = ?");
    $stmt->bind_param("s", $input['line_id']);

    if ($stmt->execute()) {
        sendResponse('success', 'Line deleted', ['line_id' => $input['line_id']]);
        logAction('Line deleted', 'delete', $ip_address, $user_agent, ['line_id' => $input['line_id']]);
    } else {
        sendResponse('error', 'Deletion failed: ' . $stmt->error, null, 500);
        logAction('Delete failed', 'error', $ip_address, $user_agent, ['error' => $stmt->error]);
    }
}
?>