<?php
header("Content-Type: application/json");
include_once __DIR__ . '/../db_config.php';
include 'log_api.php';

// Function to send JSON response
function sendResponse($status, $message, $data = null, $logData = []) {
    global $conn;

    $response = ["status" => $status, "message" => $message];
    if ($data !== null) {
        $response["data"] = $data;
    }

    // Log the API request
    logUserAction(
        null,                         // user_id (can be added later)
        "API_USER",                    // default username (change as needed)
        strtoupper($_SERVER['REQUEST_METHOD']) . " /zone_api",
        $message,
        $_SERVER['REQUEST_URI'],
        $_SERVER['REQUEST_METHOD'],
        json_decode(file_get_contents("php://input"), true), // request payload
        $status,
        $response,
        $_SERVER['REMOTE_ADDR'],      // IP address
        $_SERVER['HTTP_USER_AGENT']   // User agent
    );

    echo json_encode($response);
    exit;
}

// Get HTTP method
$method = $_SERVER['REQUEST_METHOD'];

switch ($method) {
    case 'POST': // Create Zone
        $data = json_decode(file_get_contents("php://input"), true);
        if (!empty($data['zone_name']) && !empty($data['zone_location']) && !empty($data['zone_pincode'])) {
            $zone_name = $data['zone_name'];
            $zone_location = $data['zone_location'];
            $zone_pincode = $data['zone_pincode'];

            // Insert new zone (zone_id auto-generated by trigger)
            $sql = "INSERT INTO zone (zone_name, zone_location, zone_pincode) VALUES (?, ?, ?)";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("sss", $zone_name, $zone_location, $zone_pincode);
            
            if ($stmt->execute()) {
                $zone_id = mysqli_insert_id($conn);
                sendResponse("success", "Zone created successfully", ["zone_id" => $zone_id]);
            } else {
                sendResponse("error", "Error: " . $conn->error);
            }
            $stmt->close();
        } else {
            sendResponse("error", "All fields (zone_name, zone_location, zone_pincode) are required");
        }
        break;

    case 'GET': // Retrieve Zones (All or Specific)
        if (isset($_GET['id'])) {
            $zone_id = $_GET['id'];
            $sql = "SELECT * FROM zone WHERE zone_id = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("s", $zone_id);
            $stmt->execute();
            $result = $stmt->get_result();

            if ($result->num_rows > 0) {
                sendResponse("success", "Zone found", $result->fetch_assoc());
            } else {
                sendResponse("error", "Zone not found");
            }
            $stmt->close();
        } else {
            $sql = "SELECT * FROM zone";
            $result = $conn->query($sql);
            $zones = [];

            while ($row = $result->fetch_assoc()) {
                $zones[] = $row;
            }
            sendResponse("success", "Zones retrieved", $zones);
        }
        break;

    case 'PUT': // Update Zone (Fixed Zone ID Issue)
        $data = json_decode(file_get_contents("php://input"), true);
        if (!empty($data['zone_id']) && !empty($data['zone_name']) && !empty($data['zone_location']) && !empty($data['zone_pincode'])) {
            $zone_id = $data['zone_id'];
            $zone_name = $data['zone_name'];
            $zone_location = $data['zone_location'];
            $zone_pincode = $data['zone_pincode'];

            $sql = "UPDATE zone SET zone_name = ?, zone_location = ?, zone_pincode = ? WHERE zone_id = ?";
            $stmt = $conn->prepare($sql);
            $stmt->bind_param("ssss", $zone_name, $zone_location, $zone_pincode, $zone_id);

            if ($stmt->execute() && $stmt->affected_rows > 0) {
                sendResponse("success", "Zone updated successfully", ["zone_id" => $zone_id]);
            } else {
                sendResponse("error", "No changes made or zone not found");
            }
            $stmt->close();
        } else {
            sendResponse("error", "All fields (zone_id, zone_name, zone_location, zone_pincode) are required");
        }
        break;

    case 'DELETE': // Delete Zone (Fixed)
        $data = json_decode(file_get_contents("php://input"), true);
        if (!empty($data['zone_id'])) {
            $zone_id = $data['zone_id'];

            // Check if zone exists before deleting
            $sql_check = "SELECT * FROM zone WHERE zone_id = ?";
            $stmt_check = $conn->prepare($sql_check);
            $stmt_check->bind_param("s", $zone_id);
            $stmt_check->execute();
            $result_check = $stmt_check->get_result();

            if ($result_check->num_rows > 0) {
                $sql_delete = "DELETE FROM zone WHERE zone_id = ?";
                $stmt_delete = $conn->prepare($sql_delete);
                $stmt_delete->bind_param("s", $zone_id);

                if ($stmt_delete->execute()) {
                    sendResponse("success", "Zone deleted successfully");
                } else {
                    sendResponse("error", "Error: " . $conn->error);
                }
                $stmt_delete->close();
            } else {
                sendResponse("error", "Zone ID not found");
            }
            $stmt_check->close();
        } else {
            sendResponse("error", "Zone ID is required");
        }
        break;

    default:
        sendResponse("error", "Invalid request method");
}

$conn->close();
?>
